topic "Класс Animator";
[i448;a25;kKO9; $$1,0#37138531426314131252341829483380:structitem]
[l288;2 $$2,0#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:codeitem]
[ $$0,0#00000000000000000000000000000000:Default]
[{_} 
[s4; &]
[s1;:drx3d`:`:Animator`:`:class: [@(0.0.255) class]_[* Animator]&]
[s2;%RU-RU Класс со всем функционалом для 
анимирования конкретной сущности.&]
[s2;%RU-RU  Экземпляр класса Animator ассоциируется 
всего с одной анимируемой сущностью. 
Он также следит за истёкшим временем 
(в секундах) текущей анимации, как 
и за ссылкой на воспроизводимую в 
данный момент анимацию для соответствующей 
сущности.&]
[s2;%RU-RU  &]
[s2;%RU-RU  Экземпляру Animator нужно обновляться 
на каждом кадре, с тем чтобы обновлялась 
поза анимируемой сущности. Текущую 
воспроизводимую анимацию можно изменить 
в любой момент, применяя Animator`::DoAnimation`}. 
Animator будет продолжать цикл текущей 
анимации до выбора новой анимации. 
Animator вычисляет желаемую позу текущей 
анимации, интерполируя между предыдущим 
и следуюшим ключевыми кадрами (keyframes) 
анимации (основываясь на текущем 
времени анимирования). Далее Animator 
обновляет трансформы всех джойнтов 
(joints) на каждом кадре, чтобы совпадало 
с текущей желательной позой.&]
[s3;%RU-RU &]
[s4; &]
[s5;:drx3d`:`:Animator`:`:Update`(const drx3d`:`:Joint`&`,std`:`:vector`<drx3d`:`:Matrix4`>`&`): [@(0.0.255) v
oid]_[* Update]([@(0.0.255) const]_[_^drx3d`:`:Joint^ Joint]_`&[*@3 rootJoint], 
std`::vector<[_^drx3d`:`:Matrix4^ Matrix4]>_`&[*@3 jointMatrices])&]
[s2; -|Этот метод следует вызывать на каждом 
кадре, чтобы обновлять воспроизводимую 
анимацию. Это увеличивает время анимации 
(и зацикливает его обратно, при необходимост
и), находит позу, в которой сущность 
должна находиться во время анимации, 
и затем применяет эту позу ко всем 
джойнтам (соединениям, суставам) сущности.&]
[s2; [%RU-RU  ][*@3 rootJoint               ]Корневой сустав 
иерархии джойнтов, которая создаёт 
`"скелет`" этой сущности.&]
[s2; [%RU-RU  ][*@3 jointMatrices][%RU-RU  .    ]Трансформы, 
загружаемые в шейдер и используемые 
для деформирования вершин внешнего 
покрова (`"skin`").&]
[s4; &]
[s5;:drx3d`:`:Animator`:`:IncreaseAnimationTime`(`): [@(0.0.255) void]_[* IncreaseAnimati
onTime]()&]
[s2;%RU-RU -|Увеличивает время текущей анимации, 
что позволяет ей прогрессировать. 
 Если текущая анимация заканчивается, 
таймер переустанавливается, и цикл 
анимации повторяется.&]
[s4; &]
[s5;:drx3d`:`:Animator`:`:CalculateCurrentAnimationPose`(`)const: std`::map<std`::strin
g, [_^drx3d`:`:Matrix4^ Matrix4]>_[* CalculateCurrentAnimationPose]()_[@(0.0.255) const
]&]
[s2;%RU-RU Метод возвращает текущую позу 
анимации сущности, желаемые трансформы 
локального пространства для всех 
джойнтов в мапе, проиндексированные 
по имени джойнта, которому они соответствуют
. Поза вычисляется по предыдущим и 
последующим ключевым кадрам в текущей 
анимации. Каждый ключевой кадр (keyframe) 
предоставляет желаемую позу в определённое 
время анимации, поэтому анимированную 
позу для текущего времени можно вычислить 
путём интерполяции между предыдущим 
и следующим ключевым кадром. Этот 
метод вначале находит предыдущий 
и следующий ключевой кадр, вычисляет 
положение между ними текущей анимации, 
и затем вычисляет позу для данного 
времени анимации, интерполируя между 
трансформами в этих ключевых кадрах.&]
[s2;%RU-RU return        Текущая поза, как мап желаемых 
трансформов локального пространства 
для всех джойнтов. Трансформы индексируются
 по ИДу имени джойнта, к которому они 
применяются. &]
[s3;%RU-RU &]
[s4;%RU-RU ]]